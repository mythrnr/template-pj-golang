name: "Create Release"

on:
  push:
    tags:
      - "v*"

env:
  SLACK_COLOR_FAILED: "#a92d2e"
  SLACK_COLOR: "#32bd77"
  SLACK_ICON: "https://github.com/github.png"
  SLACK_USERNAME: "GitHub Actions"

jobs:
  env:
    name: "Set env"
    runs-on: "ubuntu-latest"
    timeout-minutes: 5
    outputs:
      APP_VERSION: "${{ steps.setenv.outputs.APP_VERSION }}"
      RELEASE_BRANCH: "${{ steps.setenv.outputs.RELEASE_BRANCH }}"
      RELEASE_ENV: "${{ steps.setenv.outputs.RELEASE_ENV }}"
    steps:
      - name: "Set Version"
        run: echo "APP_VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV

      - if: "contains(github.ref, '-dev')"
        name: "Set Release env variables for Testing"
        run: |
          echo "RELEASE_BRANCH=develop" >> $GITHUB_ENV
          echo "RELEASE_ENV=testing" >> $GITHUB_ENV

      - if: "!contains(github.ref, '-dev')"
        name: "Set Release env variables for Production"
        run: |
          echo "RELEASE_BRANCH=master" >> $GITHUB_ENV
          echo "RELEASE_ENV=production" >> $GITHUB_ENV

      - id: "setenv"
        run: |
          echo "APP_VERSION=${{ env.APP_VERSION }}" >> $GITHUB_OUTPUT
          echo "RELEASE_BRANCH=${{ env.RELEASE_BRANCH }}" >> $GITHUB_OUTPUT
          echo "RELEASE_ENV=${{ env.RELEASE_ENV }}" >> $GITHUB_OUTPUT

  create-release:
    name: "Create Release"
    runs-on: "ubuntu-latest"
    timeout-minutes: 10
    needs:
      - "env"
    env:
      APP_VERSION: "${{ needs.env.outputs.APP_VERSION }}"
      RELEASE_BRANCH: "${{ needs.env.outputs.RELEASE_BRANCH }}"
      RELEASE_ENV: "${{ needs.env.outputs.RELEASE_ENV }}"
    steps:
      - uses: "actions/checkout@v3"
        with:
          fetch-depth: 0

      - name: "Login Dockerhub"
        uses: "docker/login-action@v2"
        with:
          username: "${{ secrets.DOCKERHUB_USERNAME }}"
          password: "${{ secrets.DOCKERHUB_TOKEN }}"

      - name: "Build Container"
        env:
          APP_VERSION: "${{ env.APP_VERSION }}"
          GITHUB_TOKEN: "${{ secrets.SECRET_TOKEN }}"
        run: "make build"

      - name: "Push Container"
        env:
          APP_VERSION: "${{ env.APP_VERSION }}"
          GITHUB_TOKEN: "${{ secrets.SECRET_TOKEN }}"
        run: "make push"

      - name: "Create release note"
        run: |
          echo "## Change Log" >> note.txt
          echo "" >> note.txt

          git fetch origin --tags

          RECENT_TAG=$(git tag \
            --no-contains=${{ env.APP_VERSION }} \
            --sort=authordate | tail -1)

          git log $RECENT_TAG..${{ env.APP_VERSION }} \
            --format='### %h : %s (by @%an)%n```%n%b```%n' \
            | sed -e :loop -e 'N; $!b loop' -e 's/```\n```//g' >> note.txt

      - name: "Create release"
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

          gh release create ${{ env.APP_VERSION }} \
            --title "Release ${{ env.APP_VERSION }}" \
            --notes-file note.txt

  notify:
    name: "Slack Notification on success"
    runs-on: "ubuntu-latest"
    timeout-minutes: 5
    needs:
      - "env"
      - "create-release"
    env:
      APP_VERSION: "${{ needs.env.outputs.APP_VERSION }}"
      RELEASE_BRANCH: "${{ needs.env.outputs.RELEASE_BRANCH }}"
      RELEASE_ENV: "${{ needs.env.outputs.RELEASE_ENV }}"
      SLACK_WEBHOOK: |
        ${{ secrets[fromJSON('[
          "PRODUCTION_SLACK_WEBHOOK",
          "TESTING_SLACK_WEBHOOK"
        ]')[contains(github.ref, '-dev')]] }}

    steps:
      - name: "Get workflow ID to deploy"
        id: "get-workflow-id-deploy"
        run: |
          result=$(curl -sL https://${{ secrets.SECRET_TOKEN }}@api.github.com/repos/${{ github.repository }}/actions/workflows)
          echo $result
          ID=$(echo $result | jq '.workflows[] | select(.path | contains("deploy-app")) | .id')

          echo "WORKFLOW_ID=$ID" >> $GITHUB_OUTPUT

      - name: "Notify"
        uses: "8398a7/action-slack@v3"
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          SLACK_WEBHOOK_URL: "${{ env.SLACK_WEBHOOK }}"
        with:
          status: "custom"
          custom_payload: |
            {
              username: '${{ env.SLACK_USERNAME }}',
              "icon_url": '${{ env.SLACK_ICON }}',
              text: 'Workflow [${{ github.workflow }}] is successful.',
              attachments: [{
                "author_name": "${{ github.actor }}",
                "author_link": "http://github.com/${{ github.actor }}",
                "author_icon": "http://github.com/${{ github.actor }}.png?size=32",
                color: '${{ env.SLACK_COLOR }}',
                fields: [{
                  title: 'Ref',
                  value: '${{ github.ref }}',
                  short: true
                }, {
                  title: 'Event',
                  value: '${{ github.event_name }}',
                  short: true
                }, {
                  title: 'Actions URL',
                  value: 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}',
                  short: false
                }, {
                  title: 'Release URL',
                  value: 'https://github.com/${{ github.repository }}/releases/tag/${{ env.APP_VERSION }}',
                  short: false
                }, {
                  title: 'Deploy Command',
                  value: '```' + `curl -vvv -XPOST -H "Authorization: token YOUR-TOKEN" \\
                    -H "Accept: application/vnd.github.everest-preview+json" \\
                    "https://api.github.com/repos/${{ github.repository }}/actions/workflows/${{ steps.get-workflow-id-deploy.outputs.WORKFLOW_ID }}/dispatches" \\
                    -d '{ "ref": "${{ env.RELEASE_BRANCH }}", "inputs": { "env": "${{ env.RELEASE_ENV }}", "version": "${{ env.APP_VERSION }}" } }'` + '```',
                  short: false
                }]
              }]
            }

  notify-failure:
    if: "failure()"
    name: "Slack Notification on failure"
    runs-on: "ubuntu-latest"
    timeout-minutes: 5
    needs:
      - "env"
      - "create-release"
      - "notify"
    env:
      SLACK_WEBHOOK: |
        ${{ secrets[fromJSON('[
          "PRODUCTION_SLACK_WEBHOOK",
          "TESTING_SLACK_WEBHOOK"
        ]')[contains(github.ref, '-dev')]] }}

    steps:
      - uses: "8398a7/action-slack@v3"
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          SLACK_WEBHOOK_URL: "${{ env.SLACK_WEBHOOK }}"
        with:
          status: "custom"
          custom_payload: |
            {
              username: '${{ env.SLACK_USERNAME }}',
              "icon_url": '${{ env.SLACK_ICON }}',
              text: 'Workflow [${{ github.workflow }}] is failure.',
              attachments: [{
                "author_name": "${{ github.actor }}",
                "author_link": "http://github.com/${{ github.actor }}",
                "author_icon": "http://github.com/${{ github.actor }}.png?size=32",
                color: '${{ env.SLACK_COLOR_FAILED }}',
                fields: [{
                  title: 'Ref',
                  value: '${{ github.ref }}',
                  short: true
                }, {
                  title: 'Event',
                  value: '${{ github.event_name }}',
                  short: true
                }, {
                  title: 'Actions URL',
                  value: 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}',
                  short: false
                }]
              }]
            }
