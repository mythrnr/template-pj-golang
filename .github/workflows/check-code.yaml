name: "Check codes"

on:
  pull_request:
  push:
    branches:
      - "nothing"
      # - "master"
      # - "develop"
    paths:
      - "!**.md"
      - "**.go"
      - "**.yaml"
      - "go.sum"
  workflow_dispatch:

permissions:
  contents: "read"

env:
  SLACK_COLOR_FAILED: "#a92d2e"
  SLACK_COLOR: "#32bd77"
  SLACK_ICON: "https://github.com/github.png"
  SLACK_USERNAME: "GitHub Actions"
  SLACK_WEBHOOK_URL: ${{ secrets[fromJSON('["TESTING_SLACK_WEBHOOK", "PRODUCTION_SLACK_WEBHOOK"]')[contains(github.ref, 'master')]] }}

jobs:
  golangci-lint:
    name: "Check coding style"
    runs-on: "ubuntu-latest"
    timeout-minutes: 5
    steps:
      - name: "Issue access token"
        id: "issue-token"
        uses: "getsentry/action-github-app-token@d4b5da6c5e37703f8c3b3e43abb5705b46e159cc" # v3.0.0
        with:
          app_id: "${{ secrets.CI_APP_ID }}"
          private_key: "${{ secrets.CI_APP_PRIVATE_KEY }}"

      - uses: "actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8" # v5.0.0
        with:
          token: "${{ steps.issue-token.outputs.token }}"

      - name: "Prepare git access"
        uses: "./.github/actions/prepare-git-access"
        with:
          secret-token: "${{ steps.issue-token.outputs.token }}"

      - uses: "golangci/golangci-lint-action@4afd733a84b1f43292c63897423277bb7f4313a9" # v8.0.0
        with:
          version: "latest"

  scan-vulnerabilities:
    uses: "./.github/workflows/scan-vulnerabilities.yaml"
    secrets:
      app-id: "${{ secrets.CI_APP_ID }}"
      app-private-key: "${{ secrets.CI_APP_PRIVATE_KEY }}"

  spell-check:
    name: "Check spell"
    runs-on: "ubuntu-latest"
    timeout-minutes: 5
    steps:
      - uses: "actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8" # v5.0.0

      - name: "Run spell check"
        run: "make spell-check"

  testing:
    name: "Unit Test"
    runs-on: "ubuntu-latest"
    timeout-minutes: 10
    steps:
      - uses: "actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8" # v5.0.0

      - name: "Issue access token"
        id: "issue-token"
        uses: "getsentry/action-github-app-token@d4b5da6c5e37703f8c3b3e43abb5705b46e159cc" # v3.0.0
        with:
          app_id: "${{ secrets.CI_APP_ID }}"
          private_key: "${{ secrets.CI_APP_PRIVATE_KEY }}"

      - name: "Prepare git access"
        uses: "./.github/actions/prepare-git-access"
        with:
          location: "${{ github.workspace }}/.netrc"
          secret-token: "${{ steps.issue-token.outputs.token }}"

      - uses: "actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00" # v6.0.0
        with:
          go-version: "1.25"

      - name: "Login Dockerhub"
        uses: "docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1" # v3.5.0
        with:
          username: "${{ secrets.DOCKERHUB_USERNAME }}"
          password: "${{ secrets.DOCKERHUB_TOKEN }}"

      - name: "Set Go package directory path"
        run: echo "GO_PKG_DIR=$(go env GOPATH)/pkg" >> $GITHUB_ENV

      - name: "Prepare Unit Test"
        run: |
          mkdir -p ${{ env.GO_PKG_DIR }}
          cat ${{ github.workspace }}/.netrc > ~/.netrc
          go mod tidy

          make pull \
            overridefile=github \
            go_pkgdir=${{ env.GO_PKG_DIR }}

          make tidy \
            overridefile=github \
            go_pkgdir=${{ env.GO_PKG_DIR }}

          CUR_USER=`id -u $USER`
          CUR_GROUP=`id -g $USER`
          sudo chown -R $CUR_USER:$CUR_GROUP ${{ env.GO_PKG_DIR }}

      - name: "Run database migration"
        run: |
          make migrate-exec \
            overridefile=github \
            go_pkgdir=${{ env.GO_PKG_DIR }} \
            TEST=1

      - name: "Run tests"
        run: |
          make test-json \
            overridefile=github \
            go_pkgdir=${{ env.GO_PKG_DIR }} \
            1> result.json

      - name: "Annotate tests"
        if: "${{ always() }}"
        uses: "guyarb/golang-test-annotations@2941118d7ef622b1b3771d1ff6eae9e90659eb26" # v0.8.0
        with:
          test-results: "result.json"

  notify:
    name: "Slack Notification on success"
    runs-on: "ubuntu-latest"
    timeout-minutes: 5
    needs:
      - "golangci-lint"
      - "scan-vulnerabilities"
      - "spell-check"
      - "testing"
    steps:
      - uses: "8398a7/action-slack@77eaa4f1c608a7d68b38af4e3f739dcd8cba273e" # v3.19.0
        with:
          status: "custom"
          custom_payload: |
            {
              username: '${{ env.SLACK_USERNAME }}',
              "icon_url": '${{ env.SLACK_ICON }}',
              text: 'Workflow [${{ github.workflow }}] is successful.',
              attachments: [{
                "author_name": "${{ github.actor }}",
                "author_link": "http://github.com/${{ github.actor }}",
                "author_icon": "http://github.com/${{ github.actor }}.png?size=32",
                color: '${{ env.SLACK_COLOR }}',
                fields: [{
                  title: 'Ref',
                  value: '${{ github.ref }}',
                  short: true
                }, {
                  title: 'Event',
                  value: '${{ github.event_name }}',
                  short: true
                }, {
                  title: 'Actions URL',
                  value: 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}',
                  short: false
                }]
              }]
            }

  notify-failure:
    if: "${{ failure() }}"
    name: "Slack Notification on failure"
    runs-on: "ubuntu-latest"
    timeout-minutes: 5
    needs:
      - "golangci-lint"
      - "notify"
      - "scan-vulnerabilities"
      - "spell-check"
      - "testing"
    steps:
      - uses: "8398a7/action-slack@77eaa4f1c608a7d68b38af4e3f739dcd8cba273e" # v3.19.0
        with:
          status: "custom"
          custom_payload: |
            {
              username: '${{ env.SLACK_USERNAME }}',
              "icon_url": '${{ env.SLACK_ICON }}',
              text: 'Workflow [${{ github.workflow }}] is failure.',
              attachments: [{
                "author_name": "${{ github.actor }}",
                "author_link": "http://github.com/${{ github.actor }}",
                "author_icon": "http://github.com/${{ github.actor }}.png?size=32",
                color: '${{ env.SLACK_COLOR_FAILED }}',
                fields: [{
                  title: 'Ref',
                  value: '${{ github.ref }}',
                  short: true
                }, {
                  title: 'Event',
                  value: '${{ github.event_name }}',
                  short: true
                }, {
                  title: 'Actions URL',
                  value: 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}',
                  short: false
                }]
              }]
            }
