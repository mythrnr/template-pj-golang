name: "Check codes"

on:
  pull_request:
  push:
    branches:
      - "nothing"
      # - "master"
      # - "develop"
    paths:
      - "!**.md"
      - "**.go"
      - "**.yml"
  workflow_dispatch:

env:
  GO_VERSION: "1.15"
  SLACK_COLOR_FAILED: "#a92d2e"
  SLACK_COLOR: "#32bd77"
  SLACK_ICON: "https://github.com/github.png"
  SLACK_USERNAME: "GitHub Actions"

jobs:
  golangci:
    name: "golangci-lint"
    runs-on: "ubuntu-latest"
    steps:
      - uses: "actions/checkout@v2"

      - uses: "golangci/golangci-lint-action@v2"
        with:
          version: "latest"
          args: "--config=.golangci.yml"

  scan_vulnerabilities:
    name: "Scan Vulnerabilities"
    runs-on: "ubuntu-latest"
    steps:
      - uses: "actions/checkout@v2"

      - uses: "actions/setup-go@v1"
        with:
          go-version: "${{ env.GO_VERSION }}"

      - name: "Write go.list file"
        run: "go list -json -m all > go.list"

      - uses: "sonatype-nexus-community/nancy-github-action@main"

  testing:
    name: "Unit Test"
    runs-on: "ubuntu-latest"
    steps:
      - uses: "actions/checkout@v2"

      - if: "contains(github.ref, 'master')"
        name: "Set Develop env variables for Production"
        run: |
          echo "DEV_ENV=production" >> $GITHUB_ENV
          echo "SLACK_WEBHOOK=${{ secrets.SLACK_WEBHOOK_PRODUCTION }}" >> $GITHUB_ENV

      - if: "!contains(github.ref, 'master')"
        name: "Set Develop env variables for Testing"
        run: |
          echo "DEV_ENV=testing" >> $GITHUB_ENV
          echo "SLACK_WEBHOOK=${{ secrets.SLACK_WEBHOOK_TESTING }}" >> $GITHUB_ENV

      - name: "Put .netrc"
        run: |
          echo "machine github.com" >> .netrc
          echo "    login ${{ secrets.SECRET_TOKEN }}" >> .netrc
          echo "    password x-oauth-basic" >> .netrc

      - uses: "actions/setup-go@v1"
        with:
          go-version: "${{ env.GO_VERSION }}"

      - name: "Configure sysctl limits for Elasticsearch"
        run: |
          sudo swapoff -a
          sudo sysctl -w vm.swappiness=1
          sudo sysctl -w fs.file-max=262144
          sudo sysctl -w vm.max_map_count=262144

      - name: "Login Dockerhub"
        uses: "docker/login-action@v1"
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: "Get GOMODCACHE directory path"
        id: "gomodcache-dir"
        run: |
          GOMODCACHE=$(go env GOPATH)/pkg
          mkdir -p $GOMODCACHE

          echo "::set-output name=dir::$GOMODCACHE"

      - name: "Cache GOMODCACHE directory"
        uses: "actions/cache@v2"
        # use this to check for `cache-hit`
        # `steps.gomodcache.outputs.cache-hit != 'true'`
        id: "gomodcache"
        with:
          path: "${{ steps.gomodcache-dir.outputs.dir }}"
          key: "${{ runner.os }}-mythrnr-template-pj-golang-check-code-unit-test-${{ hashFiles(format('{0}{1}', github.workspace, '/.github/workflows/check_code.yml')) }}-${{ hashFiles(format('{0}{1}', github.workspace, '/go.sum')) }}"
          restore-keys: "${{ runner.os }}-mythrnr-template-pj-golang-check-code-unit-test-"

      - name: "Prepare Unit Test"
        env:
          GO_PKGDIR: "${{ steps.gomodcache-dir.outputs.dir }}"
        run: |
          make pull \
            overridefile=github \
            go_version=${{ env.GO_VERSION }} \
            go_pkgdir=${{ env.GO_PKGDIR }}

          make build-container \
            overridefile=github \
            go_version=${{ env.GO_VERSION }} \
            go_pkgdir=${{ env.GO_PKGDIR }}

          make tidy \
            overridefile=github \
            go_version=${{ env.GO_VERSION }} \
            go_pkgdir=${{ env.GO_PKGDIR }}

          CUR_USER=`id -u $USER`
          CUR_GROUP=`id -g $USER`
          sudo chown -R $CUR_USER:$CUR_GROUP ${{ env.GO_PKGDIR }}

      - name: "Run tests"
        run: "make test-json 1> result.json 2> /dev/null"

      - name: "Annotate tests"
        if: "always()"
        uses: "guyarb/golang-test-annotations@v0.3.0"
        with:
          test-results: "result.json"

      - name: "Slack Notification on success"
        if: "success()"
        uses: "8398a7/action-slack@v3"
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          SLACK_WEBHOOK_URL: "${{ env.SLACK_WEBHOOK }}"
        with:
          status: "custom"
          custom_payload: |
            {
              username: '${{ env.SLACK_USERNAME }}',
              channel: '${{ secrets.SLACK_CHANNEL }}',
              "icon_url": '${{ env.SLACK_ICON }}',
              text: 'Workflow [${{ github.workflow }}] is successful.',
              attachments: [{
                "author_name": "${{ github.actor }}",
                "author_link": "http://github.com/${{ github.actor }}",
                "author_icon": "http://github.com/${{ github.actor }}.png?size=32",
                color: '${{ env.SLACK_COLOR }}',
                fields: [{
                  title: 'Ref',
                  value: '${{ github.ref }}',
                  short: true
                }, {
                  title: 'Event',
                  value: '${{ github.event_name }}',
                  short: true
                }, {
                  title: 'Actions URL (Artifacts are exist)',
                  value: 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}',
                  short: false
                }]
              }]
            }

      - name: "Slack Notification on failure"
        if: "failure()"
        uses: "8398a7/action-slack@v3"
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          SLACK_WEBHOOK_URL: "${{ env.SLACK_WEBHOOK }}"
        with:
          status: "custom"
          custom_payload: |
            {
              username: '${{ env.SLACK_USERNAME }}',
              channel: '${{ secrets.SLACK_CHANNEL }}',
              "icon_url": '${{ env.SLACK_ICON }}',
              text: 'Workflow [${{ github.workflow }}] is failure.',
              attachments: [{
                "author_name": "${{ github.actor }}",
                "author_link": "http://github.com/${{ github.actor }}",
                "author_icon": "http://github.com/${{ github.actor }}.png?size=32",
                color: '${{ env.SLACK_COLOR_FAILED }}',
                fields: [{
                  title: 'Ref',
                  value: '${{ github.ref }}',
                  short: true
                }, {
                  title: 'Event',
                  value: '${{ github.event_name }}',
                  short: true
                }, {
                  title: 'Actions URL',
                  value: 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}',
                  short: false
                }]
              }]
            }
