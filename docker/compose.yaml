name: "mythrnr-template-pj-golang"

x-build: &build
  args: &build-args
    HTTP_PROXY: "${HTTP_PROXY}"
    HTTPS_PROXY: "${HTTPS_PROXY}"
  pull: true

x-logging: &logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "5"

x-ulimits: &ulimits
  nofile:
    soft: 65535
    hard: 65535

x-volumes-go: &volumes-go
  - type: "bind"
    source: "../.netrc"
    target: "/home/golang/.netrc"
    read_only: true
  - type: "bind"
    source: ".."
    target: "/go/src/github.com/mythrnr/template-pj-golang"
    read_only: false
  - type: "volume"
    source: "v_go_pkg"
    target: "/go/pkg"
    read_only: false

x-profile-godoc: &profile-godoc
  logging: *logging
  profiles:
    - "godoc"
  restart: "no"

x-profile-server: &profile-server
  logging: *logging
  networks:
    - "default"
  profiles:
    - "server"
  restart: "no"
  ulimits: *ulimits

services:
  app:
    <<: *profile-server
    build:
      <<: *build
      context: "../"
      dockerfile: "docker/app/Dockerfile"
      target: "base"
    command: "bash scripts/watch.sh"
    depends_on:
      database:
        condition: "service_healthy"
      redis:
        condition: "service_started"
    env_file:
      - "./app/.env.local"
      - "./app/.env.migrate"
    environment:
      HTTP_PROXY: "${HTTP_PROXY}"
      HTTPS_PROXY: "${HTTPS_PROXY}"
      GO111MODULE: "on"
      GOPROXY: "direct"
      GOSUMDB: "off"
    expose:
      - 8080
    user: "golang"
    volumes: *volumes-go
    working_dir: "/go/src/github.com/mythrnr/template-pj-golang"

  database:
    <<: *profile-server
    image: "mysql:8.0"
    env_file: "./mysql/local.env"
    expose:
      - 3306
    healthcheck:
      # cspell:disable-next-line
      test: ["CMD-SHELL", "mysql -u root -proot_password -e 'select 1;' || exit 1"]
      interval: "1s"
      timeout: "5s"
      retries: 30
      start_period: "3s"
    user: "mysql"
    volumes:
      - type: "bind"
        source: "./mysql/conf.d"
        target: "/etc/mysql/conf.d"
        read_only: true
      - type: "bind"
        source: "./mysql/docker-entrypoint-initdb.d"
        target: "/docker-entrypoint-initdb.d"
        read_only: true
      - type: "volume"
        source: "v_mysql_data"
        target: "/var/lib/mysql"
        read_only: false

  redis:
    <<: *profile-server
    image: "redis:6-alpine"
    command: "redis-server"
    expose:
      - 6379
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]

  web:
    <<: *profile-server
    build:
      <<: *build
      context: "./nginx"
      dockerfile: "local.Dockerfile"
      args:
        <<: *build-args
        COMMON_NAME: "localhost"
    depends_on:
      - "app"
    volumes:
      - type: "bind"
        source: "./nginx/conf.d.local"
        target: "/etc/nginx/conf.d"
        read_only: true
      - type: "bind"
        source: "./nginx/certs"
        target: "/etc/nginx/certs"
        read_only: true
      - type: "bind"
        source: "./nginx/www/html"
        target: "/var/www/html"
        read_only: true

  docs:
    <<: *profile-godoc
    image: "nginx:alpine"
    depends_on:
      - "godoc"
    ports:
      - "80:80"
    volumes:
      - type: "bind"
        source: "./nginx/godoc.conf"
        target: "/etc/nginx/conf.d/default.conf"
        read_only: true
      - type: "bind"
        source: "../docs/unit_tests"
        target: "/var/www/html/unit_tests/github.com/mythrnr/template-pj-golang"
        read_only: true

  godoc:
    <<: *profile-godoc
    build:
      <<: *build
      context: "../"
      dockerfile: "docker/app/Dockerfile"
      target: "base"
    command: "godoc -http=:10000 -play -v"
    expose:
      - 10000
    user: "golang"
    volumes: *volumes-go
    working_dir: "/go/src/github.com/mythrnr/template-pj-golang"

volumes:
  v_go_pkg:
  v_mysql_data:
