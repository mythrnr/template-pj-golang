package config

import (
	"embed"
	"strings"

	"github.com/mythrnr/errors"
	pkgerrs "github.com/pkg/errors"
	"gopkg.in/yaml.v3"
)

//go:embed config.yaml
var configFile embed.FS

// Version is the value of release tag embed on build.
//
// Version はビルド時に埋め込まれるリリースタグの値.
var Version = "edge"

// Revision is the value of commit hash embed on build.
//
// Revision はビルド時に埋め込まれるコミットハッシュの値.
var Revision = "latest"

// Config is generated by https://zhwt.github.io/yaml-to-go/
type Config struct {
	App struct {
		Env        string `yaml:"env"`
		ListenPort uint16 `yaml:"listen_port"`
		LogLevel   string `yaml:"log_level"`
	} `yaml:"app"`
	Cache struct {
		Redis struct {
			Host     string `yaml:"host"`
			Password string `yaml:"password"`
			Port     uint16 `yaml:"port"`
		} `yaml:"redis"`
	} `yaml:"cache"`
	Database struct {
		Connection struct {
			LifeTimeSeconds uint `yaml:"life_time_seconds"`
			MaxIdle         uint `yaml:"max_idle"`
			MaxOpen         uint `yaml:"max_open"`
		} `yaml:"connection"`
		Logging bool `yaml:"logging"`
		MySQL   struct {
			Charset   string `yaml:"charset"`
			Database  string `yaml:"database"`
			HostRead  string `yaml:"host_read"`
			HostWrite string `yaml:"host_write"`
			Password  string `yaml:"password"`
			Port      uint16 `yaml:"port"`
			Timezone  string `yaml:"timezone"`
			Username  string `yaml:"username"`
		} `yaml:"mysql"`
	} `yaml:"database"`
	HTTP struct {
		DefaultTimeoutSeconds uint8  `yaml:"default_timeout_seconds"`
		Proxy                 string `yaml:"proxy"`
	} `yaml:"http"`
	Lang struct {
		Fallback       string `yaml:"fallback"`
		HTTPHeaderName string `yaml:"http_header_name"`
	} `yaml:"lang"`
}

func Load() (*Config, error) {
	c := &Config{}

	b, err := configFile.ReadFile("config.yaml")
	if err != nil {
		return nil, pkgerrs.WithStack(err)
	}

	if err := yaml.Unmarshal(b, c); err != nil {
		return nil, pkgerrs.WithStack(err)
	}

	if err := c.bind(); err != nil {
		return nil, err
	}

	return c, nil
}

func (c *Config) Dump() string {
	b, _ := yaml.Marshal(c)

	return string(b)
}

func (c *Config) bind() error {
	if err := errors.NewMultipleError(
		c.bindApp(),
		c.bindCache(),
		c.bindDatabase(),
		c.bindHTTP(),
		c.bindLang(),
	); err != nil {
		return err
	}

	return nil
}

func ts(v string) string { return strings.TrimSpace(v) }

//nolint:unused
func cs(v string) []string {
	vs := strings.Split(v, ",")
	ds := make([]string, 0, len(vs))

	for _, v := range vs {
		ds = append(ds, ts(v))
	}

	return ds
}

//nolint:unused
func filter(vs []string) []string {
	ds := make([]string, 0, len(vs))

	for _, v := range vs {
		if v := ts(v); v != "" {
			ds = append(ds, v)
		}
	}

	return ds
}
